{"version":3,"file":"static/js/729.f4252d3f.chunk.js","mappings":"wKAEA,MAUA,GAVeA,E,QAAAA,IAAGC,0CAA+B,CAC/CC,iBAAiB,EACjBC,cAAc,EACdC,qBAAsBC,IACtBC,kBAAmB,IACnBC,qBAAsB,IACtBC,oBAAqB,K,aCHvB,MAwDA,EAxDiBC,IAAsB,IAArB,OAAEC,EAAS,IAAID,EAC/B,MAAME,GAAWC,EAAAA,EAAAA,OACX,SAAEC,EAAQ,OAAEC,EAAM,MAAEC,IAAUC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,QACxDC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KAE7CC,EAAAA,EAAAA,YAAU,KACRX,GAASY,EAAAA,EAAAA,IAAcb,IACvBc,GAAsB,GACrB,CAACb,EAAUD,IAEd,MAAMc,EAAuBA,KAC3BC,EAAOC,GAAG,kBAADC,OAAmBjB,IAAUkB,IACpCC,QAAQC,IAAIF,GACZjB,GAASoB,EAAAA,EAAAA,IAAWH,GAAS,IAG/BH,EAAOC,GAAG,SAASX,IACjBc,QAAQd,MAAM,gBAAiBA,EAAM,GACrC,EAWJ,OACEiB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACc,YAAXnB,IAAwBoB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAChB,WAAXnB,IAAuBoB,EAAAA,EAAAA,KAAA,KAAAD,SAAIlB,KAC5BmB,EAAAA,EAAAA,KAAA,OAAAD,SACGpB,EAASsB,KAAI,CAACC,EAAKC,KAClBH,EAAAA,EAAAA,KAAA,OAAAD,UACED,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CACGG,EAAIE,SAAS,KAAGF,EAAIR,YAFfS,WAQhBL,EAAAA,EAAAA,MAAA,QAAMO,SAvBgBC,UACxBC,EAAEC,iBACEvB,EAAWwB,SACblB,EAAOmB,KAAK,cAAe,CAAElC,SAAQkB,QAAST,IAC9CC,EAAc,IAChB,EAkBoCa,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SACEW,KAAK,OACLC,MAAO3B,EACP4B,SAAUN,GAAKrB,EAAcqB,EAAEO,OAAOF,UAExCZ,EAAAA,EAAAA,KAAA,UAAQW,KAAK,SAAQZ,SAAC,cAEpB,C","sources":["utils/socket.js","sections/chats/ChatRoom.jsx"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nconst socket = io(process.env.REACT_APP_BaseURL, {\r\n  withCredentials: true,\r\n  reconnection: true,\r\n  reconnectionAttempts: Infinity,\r\n  reconnectionDelay: 1000,\r\n  reconnectionDelayMax: 5000,\r\n  randomizationFactor: 0.5,\r\n});\r\n\r\n\r\nexport default socket;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchMessages, sendMessage, addMessage } from '../../store/chatSlice';\r\nimport socket from '../../utils/socket';\r\n\r\nconst ChatRoom = ({ toUser = 76 }) => {\r\n  const dispatch = useDispatch();\r\n  const { messages, status, error } = useSelector(state => state.chat);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchMessages(toUser));\r\n    setupSocketListeners();\r\n  }, [dispatch, toUser]);\r\n\r\n  const setupSocketListeners = () => {\r\n    socket.on(`/fetchMessages/${toUser}`, message => {\r\n      console.log(message);\r\n      dispatch(addMessage(message));\r\n    });\r\n\r\n    socket.on('error', error => {\r\n      console.error('Socket error:', error);\r\n    });\r\n  };\r\n\r\n  const handleSendMessage = async e => {\r\n    e.preventDefault();\r\n    if (newMessage.trim()) {\r\n      socket.emit('sendMessage', { toUser, message: newMessage });\r\n      setNewMessage('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {status === 'loading' && <p>Loading messages...</p>}\r\n        {status === 'failed' && <p>{error}</p>}\r\n        <div>\r\n          {messages.map((msg, index) => (\r\n            <div key={index}>\r\n              <p>\r\n                {msg.fromUser}: {msg.message}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <form onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={e => setNewMessage(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"names":["io","process","withCredentials","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","_ref","toUser","dispatch","useDispatch","messages","status","error","useSelector","state","chat","newMessage","setNewMessage","useState","useEffect","fetchMessages","setupSocketListeners","socket","on","concat","message","console","log","addMessage","_jsxs","children","_jsx","map","msg","index","fromUser","onSubmit","async","e","preventDefault","trim","emit","type","value","onChange","target"],"sourceRoot":""}